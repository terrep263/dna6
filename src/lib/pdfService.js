import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

export class PDFService {
  static async generateAssessmentReport(assessmentData, userName = 'User') {
    const doc = new jsPDF();
    
    // Add header
    doc.setFontSize(24);
    doc.setTextColor(88, 28, 135); // Purple color
    doc.text('My Dating DNA Assessment Report', 20, 30);
    
    // Add user info
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(`Generated for: ${userName}`, 20, 50);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 60);
    
    // Add assessment results
    doc.setFontSize(16);
    doc.setTextColor(88, 28, 135);
    doc.text('Your Dating DNA Results', 20, 80);
    
    // Add archetype
    if (assessmentData.archetype) {
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text(`Dating Archetype: ${assessmentData.archetype}`, 20, 100);
      
      // Add archetype description
      doc.setFontSize(12);
      doc.setTextColor(75, 85, 99);
      const archetypeDescription = this.getArchetypeDescription(assessmentData.archetype);
      const splitDescription = doc.splitTextToSize(archetypeDescription, 170);
      doc.text(splitDescription, 20, 115);
    }
    
    // Add compatibility score
    if (assessmentData.compatibilityScore) {
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text(`Compatibility Score: ${assessmentData.compatibilityScore}/100`, 20, 140);
    }
    
    // Add key insights
    if (assessmentData.insights && assessmentData.insights.length > 0) {
      doc.setFontSize(16);
      doc.setTextColor(88, 28, 135);
      doc.text('Key Insights', 20, 170);
      
      assessmentData.insights.forEach((insight, index) => {
        const yPos = 185 + (index * 15);
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`• ${insight}`, 25, yPos);
      });
    }
    
    // Add recommendations
    if (assessmentData.recommendations && assessmentData.recommendations.length > 0) {
      doc.setFontSize(16);
      doc.setTextColor(88, 28, 135);
      doc.text('Personalized Recommendations', 20, 250);
      
      assessmentData.recommendations.forEach((rec, index) => {
        const yPos = 265 + (index * 15);
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`• ${rec}`, 25, yPos);
      });
    }
    
    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by MyDatingDNA - Transform Your Dating Life', 20, 280);
    
    return doc;
  }
  
  static async generateCouplesReport(couplesData, partner1Name = 'Partner 1', partner2Name = 'Partner 2') {
    const doc = new jsPDF();
    
    // Add header
    doc.setFontSize(24);
    doc.setTextColor(236, 72, 153); // Pink color
    doc.text('Couples Dating DNA Report', 20, 30);
    
    // Add couple info
    doc.setFontSize(14);
    doc.setTextColor(0, 0, 0);
    doc.text(`Partners: ${partner1Name} & ${partner2Name}`, 20, 50);
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, 60);
    
    // Add relationship score
    if (couplesData.relationshipScore) {
      doc.setFontSize(16);
      doc.setTextColor(236, 72, 153);
      doc.text('Relationship Compatibility', 20, 80);
      
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 0);
      doc.text(`Overall Score: ${couplesData.relationshipScore}/100`, 20, 100);
    }
    
    // Add individual profiles
    if (couplesData.partner1Profile) {
      doc.setFontSize(16);
      doc.setTextColor(236, 72, 153);
      doc.text(`${partner1Name}'s Profile`, 20, 130);
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Archetype: ${couplesData.partner1Profile.archetype || 'N/A'}`, 25, 150);
      doc.text(`Strengths: ${couplesData.partner1Profile.strengths || 'N/A'}`, 25, 165);
    }
    
    if (couplesData.partner2Profile) {
      doc.setFontSize(16);
      doc.setTextColor(236, 72, 153);
      doc.text(`${partner2Name}'s Profile`, 20, 190);
      
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Archetype: ${couplesData.partner2Profile.archetype || 'N/A'}`, 25, 210);
      doc.text(`Strengths: ${couplesData.partner2Profile.strengths || 'N/A'}`, 25, 225);
    }
    
    // Add relationship insights
    if (couplesData.relationshipInsights && couplesData.relationshipInsights.length > 0) {
      doc.setFontSize(16);
      doc.setTextColor(236, 72, 153);
      doc.text('Relationship Insights', 20, 250);
      
      couplesData.relationshipInsights.forEach((insight, index) => {
        const yPos = 265 + (index * 15);
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(`• ${insight}`, 25, yPos);
      });
    }
    
    // Add footer
    doc.setFontSize(10);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by MyDatingDNA - Strengthen Your Relationship', 20, 280);
    
    return doc;
  }
  
  static async downloadReport(pdfDoc, filename = 'dating-dna-report.pdf') {
    pdfDoc.save(filename);
  }
  
  static async generatePDFFromHTML(elementId, filename = 'report.pdf') {
    try {
      const element = document.getElementById(elementId);
      if (!element) {
        throw new Error(`Element with ID '${elementId}' not found`);
      }
      
      const canvas = await html2canvas(element, {
        scale: 2,
        useCORS: true,
        allowTaint: true
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF('p', 'mm', 'a4');
      const imgWidth = 210;
      const pageHeight = 295;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      let heightLeft = imgHeight;
      
      let position = 0;
      
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      heightLeft -= pageHeight;
      
      while (heightLeft >= 0) {
        position = heightLeft - imgHeight;
        pdf.addPage();
        pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
        heightLeft -= pageHeight;
      }
      
      pdf.save(filename);
      return true;
    } catch (error) {
      console.error('Error generating PDF from HTML:', error);
      return false;
    }
  }
  
  static getArchetypeDescription(archetype) {
    const descriptions = {
      'The Romantic': 'You are deeply emotional and seek meaningful connections. You value intimacy and emotional depth in relationships.',
      'The Explorer': 'You are adventurous and love new experiences. You seek partners who can keep up with your dynamic lifestyle.',
      'The Guardian': 'You are protective and nurturing. You value stability and security in relationships.',
      'The Visionary': 'You are creative and idealistic. You seek partners who share your dreams and aspirations.',
      'The Achiever': 'You are ambitious and goal-oriented. You value partners who support your drive and success.',
      'The Harmonizer': 'You are diplomatic and peace-loving. You seek balance and harmony in relationships.',
      'The Individualist': 'You are unique and independent. You value authenticity and personal freedom.',
      'The Rescuer': 'You are caring and supportive. You are drawn to helping others and fixing problems.'
    };
    
    return descriptions[archetype] || 'Your unique dating archetype reveals your core relationship patterns and preferences.';
  }
}

export default PDFService;
